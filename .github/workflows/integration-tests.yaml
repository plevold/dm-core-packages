on:
  # Workflow dispatch is used for manual triggers
  workflow_dispatch:
  # Workflow call is used for called from another workflow
  workflow_call:
    outputs:
      dm_cli_version:
        description: 'DM CLI version used in test'
        value: ${{ jobs.integration-tests.outputs.dm_cli_version }}
      dmss_version:
        description: 'DMSS version used in test'
        value: ${{ jobs.integration-tests.outputs.dmss_version }}
      job_version:
        description: 'Job version used in test'
        value: ${{ jobs.integration-tests.outputs.job_version }}

jobs:
  integration-tests:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    # Map a step output to a job output
    outputs:
      dm_cli_version: ${{ steps.capture_dm_cli_version.outputs.version }}
      dmss_version: ${{ steps.capture_dmss_version.outputs.dmss_version }}
      job_version: ${{ steps.capture_job_version.outputs.job_version }}
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install daemon process manager
        run: npm install pm2 -g

      - name: Cache node modules
        id: cache-npm
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          path: |
            ./example/node_modules
            ./node_modules
            ./yarn.lock
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('./packages/dm-core/package.json')}}-${{ hashFiles('./packages/dm-core-plugins/package.json') }}

      - name: Install dependencies
        run: yarn install

      - name: Build packages
        run: yarn build:packages

      - name: Start example application
        run: pm2 start "yarn build --mode test && yarn serve" --name web --wait-ready #--listen-timeout 10000 # wait for 10 seconds
        working-directory: example/

      - name: Pull docker images
        run: docker-compose pull
        working-directory: example/

      - name: Capture output DMSS version
        id: capture_dmss_version
        run: |
          docker-compose run --rm dmss cat src/version.txt > dmss_version.txt
          dmss_version=$(tail -n 1 dmss_version.txt)
          echo "dmss_version=$dmss_version" >> "$GITHUB_OUTPUT"
        working-directory: example/

      - name: Capture job-api version
        id: capture_job_version
        run: |
          docker-compose run --rm job-api cat version.txt > job_version.txt
          job_version=$(tail -n 1 job_version.txt)
          echo "job_version=$job_version" >> "$GITHUB_OUTPUT"
        working-directory: example/

      - name: Run docker images
        run: docker-compose up -d
        working-directory: example/

      - name: Pack core plugins
        run: npm pack @development-framework/dm-core-plugins
        working-directory: example/

      - name: Extract tarball
        run: tar -xzf development-framework-dm-core-plugins-*.tgz
        working-directory: example/

      - name: Create required directory in node_modules
        run: mkdir -p node_modules/@development-framework/
        working-directory: example/

      - name: Move package to directory in node_modules
        run: mv package/ node_modules/@development-framework/dm-core-plugins
        working-directory: example/

      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dm-cli package
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
        working-directory: example/

      - name: Capture dm-cli version
        id: capture_dm_cli_version
        run: echo "version=$(dm --version)" >> "$GITHUB_OUTPUT"
        working-directory: example/

      - name: Run reset-app script
        run: ./reset-app.sh
        working-directory: example/

      - name: Cache e2e dependencies
        uses: actions/cache@v3
        id: cache-e2e
        env:
          cache-name: cache-e2e-deps-modules
        with:
          path: |
            ~/.cache/ms-playwright
            ./e2e/node_modules
            ./yarn.lock
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('./package.json')}}

      - name: Install dependencies
        run: |
          npm install --package-lock-only
          npm ci
        working-directory: e2e/

      - run: npx playwright install --with-deps
        if: steps.cache-e2e.outputs.cache-hit != 'true'
        working-directory: e2e/

      - name: Run e2e tests
        run: |
          pm2 ps
          npx playwright test
        working-directory: e2e/

      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results
          path: e2e/test-results/
          retention-days: 30

      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: e2e/playwright-report/
          retention-days: 30
